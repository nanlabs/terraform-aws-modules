name: 🚀 Automated Release

on:
  push:
    branches:
      - main
    paths:
      - 'CHANGELOG.md'
      - '.release-trigger'
      - 'modules/**'

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (major, minor, patch)'
        required: false
        default: 'minor'
        type: choice
        options:
        - major
        - minor
        - patch
      skip_changelog_check:
        description: 'Skip changelog validation'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.changes.outputs.should_release }}
      release_type: ${{ steps.changes.outputs.release_type }}
      changed_modules: ${{ steps.changes.outputs.changed_modules }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Detect Release Trigger
        id: changes
        shell: bash
        run: |
          #!/bin/bash

          should_release="false"
          release_type="minor"
          changed_modules=""

          # Check if this is a manual workflow dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            should_release="true"
            release_type="${{ github.event.inputs.release_type }}"
            echo "Manual release triggered with type: $release_type"
          else
            # Get the last commit message and PR info
            commit_msg=$(git log -1 --pretty=%B)
            echo "Commit message: $commit_msg"

            # Check for release type in commit message
            if echo "$commit_msg" | grep -q "release-type: major"; then
              release_type="major"
            elif echo "$commit_msg" | grep -q "release-type: minor"; then
              release_type="minor"
            elif echo "$commit_msg" | grep -q "release-type: patch"; then
              release_type="patch"
            fi

            # Check if CHANGELOG.md has unreleased changes
            if [[ "${{ github.event.inputs.skip_changelog_check }}" != "true" ]]; then
              if grep -A 50 "## \[Unreleased\]" CHANGELOG.md | grep -E "^- " > /dev/null; then
                should_release="true"
                echo "Unreleased changes found in CHANGELOG.md"
              fi
            fi

            # Check if .release-trigger was modified
            if git diff HEAD~1 --name-only | grep -q "\.release-trigger"; then
              should_release="true"
              echo "Release trigger file was modified"
            fi

            # Get changed modules
            changed_files=$(git diff HEAD~1 --name-only | grep "^modules/" || true)
            if [[ -n "$changed_files" ]]; then
              changed_modules=$(echo "$changed_files" | cut -d'/' -f2 | sort -u | tr '\n' ',' | sed 's/,$//')
              echo "Changed modules: $changed_modules"
            fi
          fi

          echo "should_release=$should_release" >> $GITHUB_OUTPUT
          echo "release_type=$release_type" >> $GITHUB_OUTPUT
          echo "changed_modules=$changed_modules" >> $GITHUB_OUTPUT

          echo "Final decision: should_release=$should_release, release_type=$release_type"

  create-release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should_release == 'true'
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      previous_version: ${{ steps.version.outputs.previous_version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get Latest Version and Bump
        id: version
        shell: bash
        run: |
          #!/bin/bash

          # Get the latest version tag
          latest_tag=$(git tag -l "v*" | sort -V | tail -n1)

          if [[ -z "$latest_tag" ]]; then
            # No previous tags, start with v1.0.0
            previous_version="v0.0.0"
            case "${{ needs.detect-changes.outputs.release_type }}" in
              major) new_version="v1.0.0" ;;
              minor) new_version="v0.1.0" ;;
              patch) new_version="v0.0.1" ;;
            esac
          else
            previous_version="$latest_tag"
            # Remove 'v' prefix for version calculation
            version_num=${latest_tag#v}

            # Split version into components
            IFS='.' read -ra VERSION_PARTS <<< "$version_num"
            major=${VERSION_PARTS[0]}
            minor=${VERSION_PARTS[1]}
            patch=${VERSION_PARTS[2]}

            # Bump version based on release type
            case "${{ needs.detect-changes.outputs.release_type }}" in
              major)
                major=$((major + 1))
                minor=0
                patch=0
                ;;
              minor)
                minor=$((minor + 1))
                patch=0
                ;;
              patch)
                patch=$((patch + 1))
                ;;
            esac

            new_version="v${major}.${minor}.${patch}"
          fi

          echo "Previous version: $previous_version"
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "previous_version=$previous_version" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG
        shell: bash
        run: |
          #!/bin/bash

          new_version="${{ steps.version.outputs.new_version }}"
          current_date=$(date +%Y-%m-%d)

          # Create a temporary file for the new changelog
          temp_file=$(mktemp)

          # Process the changelog
          awk -v version="$new_version" -v date="$current_date" '
          /^## \[Unreleased\]/ {
            print $0
            print ""
            getline
            print $0
            print ""
            # Print the new version header
            print "## [" substr(version, 2) "] - " date
            found_unreleased = 1
            next
          }
          found_unreleased && /^## \[/ {
            # Add blank line before next version
            print ""
            print $0
            found_unreleased = 0
            next
          }
          { print $0 }
          ' CHANGELOG.md > "$temp_file"

          # Replace the original file
          mv "$temp_file" CHANGELOG.md

          # Add version links at the bottom if they don't exist
          if ! grep -q "\[Unreleased\]:" CHANGELOG.md; then
            echo "" >> CHANGELOG.md
            echo "[Unreleased]: https://github.com/nanlabs/terraform-aws-modules/compare/${new_version}...HEAD" >> CHANGELOG.md
            echo "[${new_version#v}]: https://github.com/nanlabs/terraform-aws-modules/releases/tag/${new_version}" >> CHANGELOG.md
          else
            # Update existing links
            sed -i "s|\[Unreleased\]:.*|[Unreleased]: https://github.com/nanlabs/terraform-aws-modules/compare/${new_version}...HEAD|" CHANGELOG.md
            sed -i "/\[Unreleased\]:/a [${new_version#v}]: https://github.com/nanlabs/terraform-aws-modules/releases/tag/${new_version}" CHANGELOG.md
          fi

      - name: Generate Release Notes
        id: release_notes
        shell: bash
        run: |
          #!/bin/bash

          new_version="${{ steps.version.outputs.new_version }}"
          previous_version="${{ steps.version.outputs.previous_version }}"
          changed_modules="${{ needs.detect-changes.outputs.changed_modules }}"

          # Extract release notes from changelog
          release_notes=$(awk "/^## \[${new_version#v}\]/,/^## \[/" CHANGELOG.md | head -n -1 | tail -n +2)

          # Create release notes
          {
            echo "# 🚀 Release ${new_version}"
            echo ""

            if [[ -n "$changed_modules" ]]; then
              echo "## 📦 Changed Modules"
              echo ""
              IFS=',' read -ra modules <<< "$changed_modules"
              for module in "${modules[@]}"; do
                echo "- \`$module\`"
              done
              echo ""
            fi

            echo "## 📝 What's Changed"
            echo ""

            if [[ -n "$release_notes" && "$release_notes" != *"No changes"* ]]; then
              echo "$release_notes"
            else
              echo "- See commit history for detailed changes"
            fi

            echo ""
            echo "## 📊 Comparison"
            echo ""
            if [[ "$previous_version" != "v0.0.0" ]]; then
              echo "**Full Changelog**: https://github.com/nanlabs/terraform-aws-modules/compare/${previous_version}...${new_version}"
            else
              echo "**Initial Release**: This is the first tagged release of the terraform-aws-modules repository."
            fi

            echo ""
            echo "## 🎯 Module Usage"
            echo ""
            echo "Use this release in your Terraform configurations:"
            echo ""
            echo "\`\`\`hcl"
            echo "module \"example\" {"
            echo "  source = \"git::https://github.com/nanlabs/terraform-aws-modules.git//modules/MODULE_NAME?ref=${new_version}\""
            echo "  # ... module configuration"
            echo "}"
            echo "\`\`\`"
          } > release_notes.md

          # Set output for GitHub Actions
          {
            echo "release_notes<<EOF"
            cat release_notes.md
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Commit Version Bump
        run: |
          git add CHANGELOG.md
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          git push origin main

      - name: Create Git Tag
        run: |
          git tag ${{ steps.version.outputs.new_version }}
          git push origin ${{ steps.version.outputs.new_version }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          release_name: ${{ steps.version.outputs.new_version }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          draft: false
          prerelease: false
